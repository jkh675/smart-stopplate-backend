// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// 1
datasource db {
  provider = "mysql"
  url      = env("MYSQL_CONNECTION_STRING")
}

// 2
generator client {
  provider = "prisma-client-js"
}

enum StageType {
  LONG
  MEDIUM
  SHORT
  OTHER
}

model Stage {
  id            Int       @id @unique @default(autoincrement())
  createdAt     DateTime  @default(now())
  name          String
  description   String
  paperTargets  Int
  noShoots      Int
  popperTargets Int
  isLocked      Boolean   @default(false)
  condition     Int
  type          StageType

  Scorelist Scorelist[]
}

enum Division {
  OPEN
  STANDARD
  PRODUCTION
  PRODUCTIONOPTICS
  CLASSIC
}

model Shooter {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  division  Division
  Score     Score[]
}

// A Scoreboard contains different Scorelist
// *Scoreboard is the collection of scorelist
// Scorelist contains every shooters score record and its refer to its own stage
// Score is the single item of a single score record(e.g. time, hf, etc..)
model Scoreboard {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  name      String

  isLocked Boolean @default(false)

  Scorelists Scorelist[]
}

model Scorelist {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())

  Stage   Stage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId Int

  Scoreboard   Scoreboard @relation(fields: [scoreboardId], references: [id], onDelete: Cascade)
  scoreboardId Int

  rounds Int @default(1)

  isLocked Boolean @default(false)

  Scores Score[]
}

enum ScoreState {
  DQ
  DNF
  HAVE_NOT_SCORED_YET
  SCORED
}

model Score {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())

  Scorelist   Scorelist @relation(fields: [scorelistId], references: [id], onDelete: Cascade)
  scorelistId Int

  Shooter   Shooter @relation(fields: [shooterId], references: [id], onDelete: Cascade)
  shooterId Int

  alphaZone   Int @default(0)
  charlieZone Int @default(0)
  deltaZone   Int @default(0)
  noShoots    Int @default(0)
  miss        Int @default(0)

  poppers Int @default(0)

  proError Int @default(0)
  
  totalScore Int @default(0)

  time Float @default(0)

  hitFactor Float @default(0)

  round Int @default(1)

  scoreState ScoreState @default(HAVE_NOT_SCORED_YET)

  dqReason    DqReason? @relation(fields: [dqReasonId], references: [id])
  dqReasonId  Int?

}

model DqReason {
  id          Int     @id @unique @default(autoincrement())
  index       String
  category    String
  category_zh String
  content     String
  content_zh  String
  Score       Score[]
}

model ProErrorReason {
  id                Int         @id @unique @default(autoincrement())
  index             String
  big_title         String
  big_title_zh      String
  content           String
  content_zh        String
  single_punishment Boolean     @default(true) //is this pro error only can assign one time or multiple times
}
