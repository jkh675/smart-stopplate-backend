// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// 1
datasource db {
  provider = "mysql"
  url      = env("MYSQL_CONNECTION_STRING")
}

// 2
generator client {
  provider = "prisma-client-js"
}

enum StageType {
  LONG
  MEDIUM
  SHORT
  OTHER
}

model Stage {
  id            Int       @id @unique @default(autoincrement())
  createdAt     DateTime  @default(now())
  name          String
  description   String
  paperTargets  Int
  noShoots      Int
  popperTargets Int
  isLocked      Boolean   @default(false)
  condition     Int
  type          StageType

  Scorelist Scorelist[]
}

enum Division {
  OPEN
  STANDARD
  PRODUCTION
  PRODUCTIONOPTICS
  CLASSIC
}

model Shooter {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  division  Division
  Score     Score[]
}

// A Scoreboard contains different Scorelist
// *Scoreboard is the collection of scorelist
// Scorelist contains every shooters score record and its refer to its own stage
// Score is the single item of a single score record(e.g. time, hf, etc..)
model Scoreboard {
  id        Int         @id @unique @default(autoincrement())
  createdAt DateTime    @default(now())
  name      String

  Scorelists Scorelist[]
}

model Scorelist {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())

  stage   Stage @relation(fields: [stageId], references: [id])
  stageId Int

  Scoreboard   Scoreboard? @relation(fields: [scoreboardId], references: [id])
  scoreboardId Int?

  scores        Score[]
}

model Score {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())

  Scorelist   Scorelist? @relation(fields: [scorelistId], references: [id])
  scorelistId Int?

  Shooter   Shooter @relation(fields: [shooterId], references: [id])
  shooterId Int

  alphaZone   Int
  charlieZone Int
  deltaZone   Int
  noShoots    Int
  miss        Int

  poppers Int

  proError Int

  totalScore Int

  time Float

  hitFactor Float
}
